# TODO: Enumerate user permissions (or make dynamic)
# TODO: Create a separate openapi project for the database model (separate DTO from database model)
# TODO: Security measures for user.password
openapi: "3.0.3"
info:
  version: 1.0.1
  title: Lankheet Domotics api
  description: Lankheet Domotics API
servers:
  - url: /rest/domiot-iot-rest/v1
security:
  - apiKeyAuth: []
tags:
  - name: Site
  - name: Device
  - name: User
paths:
  /site:
    post:
      tags:
        - Site
      summary: Add a new site
      operationId: addSite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '200':
          description: Site saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Site'
  /site/{siteId}:
    get:
      tags:
        - Site
      summary: Get a site
      operationId: getSite
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Site content
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/Site'
    put:
      tags:
        - Site
      summary: Update a site
      operationId: updateSite
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Site'
      responses:
        '200':
          description: Site
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/Site'
  /site/{siteId}/devices:
    get:
      tags:
        - Device
      summary: Get all devices of a site
      operationId: getSiteDevices
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: number
      responses:
        '200':
          description: Devices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    post:
      tags:
        - Device
      summary: Add devices to a site
      operationId: addDevices
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device is updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /site/{siteId}/devices/{deviceId}:
    get:
      tags:
        - Device
      summary: Get a device
      operationId: getDevice
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: integer
            format: int64
        - name: deviceId
          in: path
          description: The device identification
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Device content
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
    put:
      tags:
        - Device
      summary: Update a device configuration
      operationId: updateDevice
      parameters:
        - name: siteId
          in: path
          description: site identification
          required: true
          schema:
            type: integer
            format: int64
        - name: deviceId
          in: path
          description: The device identification
          required: true
          schema:
            type: object
      requestBody:
        content:
         application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '200':
          description: Device is updated
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
  /user:
    post:
      tags:
        - User
      summary: Add a new User
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /user/{userId}:
    get:
      tags:
        - User
      summary: Get a user
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: user identification
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: User content
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      tags:
        - User
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: user identification
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User content
          content:
            application/json:
              schema:
                type: object
                items:
                  $ref: '#/components/schemas/User'
components:
  schemas:
    Id:
      type: integer
      format: int64
      readOnly: true
      description: 'unique identification'
    User:
      description: 'A user of the site'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        permissions:
          type: string
          description: 'SITE_ADMIN/NOTIFIED/...'
        siteId:
          description: 'A user can belong to only one site'
          type: integer
          format: int64
        password:
          type: string
          format: password
        email-address:
          type: string
        dtRegistered:
          type: string
          format: date-time
        status:
          type: string
          enum: [ ACTIVE, LOCKED, REGISTERED ]
          x-enumNames: [ ACTIVE, LOCKED, REGISTERED ]
          description: 'User status; active, locked (for security reasons), registered (not active)'
    Site:
      type: object
      properties:
        siteId:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        description:
          type: string
        dtCreated:
          format: date-time
          type: string
        mqttConfig:
          $ref: '#/components/schemas/MqttConfig'
        P1Config:
          $ref: '#/components/schemas/PowermeterConfig'
        SerialConfig:
          $ref: '#/components/schemas/SerialConfig'
        users:
          items:
            $ref: '#/components/schemas/User'
    PowermeterConfig:
      type: object
      properties:
        repeatValuesAfter:
          type: integer
          description: 'After how many seconds will all values be sent instead of only the changed ones'
        internalQueueSize:
          type: integer
          description: 'How many values can be stored internally before values are lost'
    SerialConfig:
      type: object
      properties:
        p1Key:
          type: string
          description: 'unique key of the smart meter'
        serialPort:
          type: string
          description: 'serial port used on the system e.g. /dev/ttyUSB0'
        baudRate:
          type: integer
          description: 'the baudrate of the serial port, 115200'
    Device:
      type: object
      description: 'A device can have multiple sensors and/or actuators'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        macAddress:
          type: string
          description: 'The physical address of the device'
        sensors:
          items:
            $ref: '#/components/schemas/Sensor'
        actuators:
          items:
            $ref: '#/components/schemas/Actuator'
    Sensor:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        type:
          $ref: '#/components/schemas/SensorType'
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IotParameter"
    IotParameter:
      type: object
      properties:
        parameter:
          type: string
        value:
          type: number
    SensorType:
      type: string
      enum: [ TEMP, HUMID, POWER, GAS_METER, GAS_SENSOR ]
      x-enumNames: [ TEMPERATURE, HUMIDITY, POWER_METER, GAS_METER, GAS_SENSOR ]
      description: 'Sensor types'
    SensorNode:
      type: object
      description: 'A sensor node is a logical unit that can produce a measurement in the mqtt datalink layer. 
      It is derived from the Sensor type. Sensors can produce more types of sensor values. '
      properties:
        macAddress:
          type: string
          description: 'The unique identification of the sensor.'
        type:
          $ref: '#/components/schemas/SensorType'
    SensorValue:
      description: 'A sensor value correspondents to a measurement taken by a sensor'
      type: object
      properties:
        node:
          $ref: '#/components/schemas/SensorNode'
        timestamp:
          description: 'date-time of occurrence'
          type: string
          format: date-time
        value:
          type: number
          format: double
    MqttTopicType:
      type: string
      enum: [ POWER, GAS, TEMP, HUMIDITY, SWITCH, STATUS ]
      description: 'Mqtt broker topic types'
    MqttConfig:
      properties:
        id:
          $ref: '#/components/schemas/Id'
        clientId:
          type: number
          description: 'The unique identification on the mqtt broker'
        userId:
          type: number
          description: 'The user reference for logging into the mqtt broker'
        url:
          type: string
          description: 'The url of the mqtt broker (tcp://localhost:1883)'
        topics:
          description: 'The configured topics for the mqtt broker'
          items:
            $ref: '#/components/schemas/MqttTopic'
    MqttTopic:
      properties:
        path:
          type: string
          description: 'the mqtt topic path e.g. p1/power, p1/gas'
        type:
          $ref: '#/components/schemas/MqttTopicType'
      type: object
      description: 'The configured topics for the local mqtt broker'
    Actuator:
      type: object
      description: 'An actuator can operate devices'
      properties:
        id:
          $ref: '#/components/schemas/Id'
        parameters:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/IotParameter"
    Command:
      type: object
      description: 'A command is an event to act on a sensor value or timer'
      properties:
        predicateActionList:
          type: object
          additionalProperties:
            type: object
            properties:
              predicate:
                type: object
                additionalProperties:
                  type: object
                  properties:
                    parameter:
                      type: string
                      description: 'The parameter that is to be inspected'
                    value:
                      type: string
                      description: 'Relational specification of the parameter value ( using <, >, ==, )'
              action:
                type: object
                properties:
                  delay:
                    type: integer
                    description: 'How many ms should be waited before executing the action'
                  actionCommand:
                    type: string
                    description: 'TODO: Should be put an mqtt command in here?'
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: jwt
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
